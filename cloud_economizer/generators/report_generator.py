"""
Report generator for creating various output formats
"""
import json
from pathlib import Path
from typing import Dict
from jinja2 import Template


class ReportGenerator:
    """Generates reports from analysis results"""
    
    def __init__(self):
        pass
    
    def generate(self, data_file: str, format: str, output: str):
        """
        Generate report in specified format
        
        Args:
            data_file: Path to analysis results JSON
            format: Output format (html, pdf, json, csv)
            output: Output file path
        """
        # Load analysis data
        with open(data_file, 'r') as f:
            data = json.load(f)
        
        if format == 'html':
            self._generate_html(data, output)
        elif format == 'json':
            self._generate_json(data, output)
        elif format == 'csv':
            self._generate_csv(data, output)
        elif format == 'pdf':
            self._generate_pdf(data, output)
    
    def _generate_html(self, data: Dict, output: str):
        """Generate HTML report"""
        template = """
<!DOCTYPE html>
<html>
<head>
    <title>Cloud Economizer - Cost Optimization Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            border-radius: 10px;
            margin-bottom: 30px;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
        }
        .summary {
            background: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .metric {
            display: inline-block;
            margin-right: 40px;
        }
        .metric-value {
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
        }
        .metric-label {
            color: #666;
            font-size: 0.9em;
        }
        .category {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .category h2 {
            margin-top: 0;
            color: #333;
        }
        .finding {
            border-left: 4px solid #667eea;
            padding: 15px;
            margin: 10px 0;
            background: #f9f9f9;
        }
        .savings {
            color: #22c55e;
            font-weight: bold;
        }
        .priority-high { border-left-color: #ef4444; }
        .priority-medium { border-left-color: #f59e0b; }
        .priority-low { border-left-color: #10b981; }
    </style>
</head>
<body>
    <div class="header">
        <h1>☁️ Cloud Economizer Report</h1>
        <p>Cost Optimization Analysis - {{ timestamp }}</p>
    </div>
    
    <div class="summary">
        <div class="metric">
            <div class="metric-value">${{ "%.2f"|format(total_savings) }}</div>
            <div class="metric-label">Potential Monthly Savings</div>
        </div>
        <div class="metric">
            <div class="metric-value">{{ total_findings }}</div>
            <div class="metric-label">Optimization Opportunities</div>
        </div>
    </div>
    
    {% for category, data in categories.items() %}
    <div class="category">
        <h2>{{ category }}</h2>
        <p><strong>Findings:</strong> {{ data.count }} | <strong>Potential Savings:</strong> <span class="savings">${{ "%.2f"|format(data.savings) }}/month</span></p>
        
        {% for item in data.items[:10] %}
        <div class="finding">
            <strong>{{ item.resource_type }}:</strong> {{ item.resource_id }}<br>
            <strong>Issue:</strong> {{ item.issue }}<br>
            <strong>Recommendation:</strong> {{ item.recommendation }}<br>
            <strong>Est. Savings:</strong> <span class="savings">${{ "%.2f"|format(item.estimated_monthly_savings) }}/month</span>
        </div>
        {% endfor %}
        
        {% if data.items|length > 10 %}
        <p><em>... and {{ data.items|length - 10 }} more findings</em></p>
        {% endif %}
    </div>
    {% endfor %}
    
    <div class="summary">
        <p style="text-align: center; color: #666;">
            Generated by Cloud Economizer - Open Core Edition
        </p>
    </div>
</body>
</html>
"""
        
        # Calculate totals
        total_findings = sum(cat.get('count', 0) for cat in data['categories'].values())
        
        # Render template
        tmpl = Template(template)
        html = tmpl.render(
            timestamp=data.get('timestamp', ''),
            total_savings=data.get('total_savings', 0),
            total_findings=total_findings,
            categories=data.get('categories', {})
        )
        
        # Write output
        with open(output, 'w') as f:
            f.write(html)
    
    def _generate_json(self, data: Dict, output: str):
        """Generate JSON report"""
        with open(output, 'w') as f:
            json.dump(data, f, indent=2)
    
    def _generate_csv(self, data: Dict, output: str):
        """Generate CSV report"""
        import csv
        
        with open(output, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([
                'Category', 'Resource Type', 'Resource ID', 'Region',
                'Issue', 'Recommendation', 'Monthly Savings', 'Confidence'
            ])
            
            for category, cat_data in data.get('categories', {}).items():
                for item in cat_data.get('items', []):
                    writer.writerow([
                        category,
                        item.get('resource_type', ''),
                        item.get('resource_id', ''),
                        item.get('region', ''),
                        item.get('issue', ''),
                        item.get('recommendation', ''),
                        f"${item.get('estimated_monthly_savings', 0):.2f}",
                        f"{item.get('confidence', 0):.0%}"
                    ])
    
    def _generate_pdf(self, data: Dict, output: str):
        """Generate PDF report (requires additional libraries)"""
        # For minimal implementation, just save as HTML with .pdf extension
        # In production, this would use reportlab or weasyprint
        html_output = output.replace('.pdf', '.html')
        self._generate_html(data, html_output)
        print(f"Note: PDF generation not fully implemented. HTML report saved to {html_output}")
